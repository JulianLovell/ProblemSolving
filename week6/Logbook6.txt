JULIAN'S LOGBOOK

Problem 1 - GoodHours
Design Ideas: 
This one took me a little while to fully think through, but it seems easy enough. 
I can loop through every minute between beforeTime and afterTime, after converting the times into minutes since midnight for easier iterations. 
For each minute, we just extract the digits from hours and minutes and check if the time is good by trying three different splits of the digits like hours and minutes. 
If any split results in equal products, it therefore counts as a good time.

I can handle a case where afterTime is earlier than beforeTime by adding 24 hours to afterTime. 
And like other questions i will keep a counter for good times and return the count at the end.

Troubleshooting:
Had no issues with the first implementation. I expected this to work as a spent a bit longer brainstorming the problem. Was fairly simple to do.

Reflection:
My code definetly wasn't optimised and i could have used seperate functions to write this better, however in this class i prefer to try to keep everything in the one function just because i find it a bit easier to read
through/ debug.


Problem 2 - BlackAndWhiteSolitaire
Design Ideas:
This one seems pretty straightforward, i can just us a for loop and iterate through the given string, i can then have a counter variable to track how many cards are flipped and then a variable within the string 
tracking the colour of the current/previous card. I if the current matches the previous i will ++counter and iterate to the next, setting the previous value to the correct colour. The only situation where this wouldn't
work i imagine, is a case where the optimal number of flips requires the first to be flipped instead of starting the pattern from there. A lazy solution to this can be to just do this whole thing twice, once for each
possible colour for the starting card, and then just return the minimum counted variable out of the two. Another solution could be doing something like counting through how many black/white cards there already are
and maybe there is some sort of connection where if there are already more white than black cards it is more efficient to start with white. However i will stick with my initial thought process. 

Troubleshooting:
My first implementation didn't account for the first card being incorrect for the optimal solution, however i just wanted to make sure my loop logic was correct. 
I also spelt solitiare wrong every time i wrote it which wasn't very helpful and caused the compile to fail.
My first attempt didn't even run on gradescope, which i sort of expected as it was a very lazy initial implementation. I have re done it, this time also including the second loop through and expect this version to work.
That implementation also didn't compile as i have now realised when correcting the spelling of solitaire i actually did have it spelled write and rewrote it incorrectly. This means i rewrote all my code unnecessarily.

Reflection:
My first proper attempt passed the first time, however it took more tries than it should have. Ive learned from this that i need to be way more careful in writing out the function and file names. Taking a lazy approach from the start, while my code was fine,
led to me making unnecessary issues elsewhere, which is a mistake i made in prac exam 1 as well.


Problem 3 - ColorfulRabbits
Design Ideas:
This one actually seems intially easier than the first two i did. For every 'unique' number given, i know that there are x+1 rabbits of the color representing that number. However the hard part
is if there are multiple different colours with the same number of rabbits. I think the solution to this is to calcuate how many groups of x+1 rabbits are needed, based on how many rabbits gave that same reply.
I'm pretty sure i can just do this by dividing the count of rabbits by x+1 and then rounding up, but im not certain so may need to troubleshoot that further, however just to get it started i will assume that is correct.
Finally, i want to try using a map for this problem because being comfortable using them would be very helpful, but i have avoided doing so so far.

Troubleshooting:
I set up the map correctly, but wasn't sure how to search through it in the loop i set up after. After looking around i got the solution i currently have, i don't fully understand it but if it does work properly
i will make sure to do a bit more research to get comfortable.
For some reason it is not being graded in gradescope despite having the right file and path names (i think). I tried renaming it to 'colourful' because maybe the course changed the spelling to the british english version without
mentioning it but that didn't work either. Last time i got this issue it was related to the filpath so ill just have to keep trying a few things. I'm an idiot and had them outside the week 6 folder...

Reflection:
Was good to get practice using a map, it is pretty simple to implement but i always blank when actually trying to do so. I will also be more careful with my filepaths in the future because i just wasted time with such a 
basic issue there.


Problem 4 - NiceOrUgly (BONUS)
Design Ideas:
I feel like i could just brute force this by making a list of all the vowels and then a list of all the consonants, then just iterating through the string checking each element if it is a 'member' of either group, 
adding to a vowel or consontants counter if it is and then resetting the counter if it is the other. I can then just immediately break and return UGLY if one of the counters reaches the 3 or 5 limit, otherwise 
continuing through and returning NICE at the end if not.

I can probably get away with not even having a consonants list and just using an else statment after the vowel check for them. Although there are also symbol characters (?) which were definetly included in the problem for that reason
so i think i will just be lazy and keep it simple, as i would probably rather do if this were also a prac exam, as there is less to 'get wrong'.

Oh i see, i didn't read the problem correctly and the '?' act as jokers, this complicates it a little bit more than i realised. I guess i just check both possibilities, then also if replacing the ? can resault in both NICE and Ugly
i can then just return 42.

Troubleshooting:
Ive set this up using a lot of bool checks, i dont use them much and they fit here. This is also a good opportunity to use different functions as i mentioned in one of my reflections from a previous problem.
Hopefully i can get it working this way.
I got 62/100 on my first attempt, but i can see why. I am not properly handling cases where there are multiple ? like '?????'. I need to track all possibilities of the sequnces of ? without making a hard decision too early.
My code was getting pretty messy and confusing and i still couldnt figure out the fix, so i decided to just start fresh.

New design ideas:
My initial approach was too fixed, which was clear when dealing with multiple ? characters. I was also deciding whether the string was "UGLY" or "NICE" without fully exploring all possibilities, 
which is why cases like ????? werent handled correctly. My plan for the new version should fix this this by tracking both the a 'minimum' and 'maximum' possible consecutive vowels/consonants in a single pass. 
Which should detect definite "UGLY" cases early and then correctly return "42" when both outcomes are possible, without making a hard decision too soon.

Reflection:
