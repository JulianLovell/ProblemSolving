JULIAN'S LOGBOOK

Problem 1 - Multiples
Design Ideas:
I can just iterate through running a check on each number if it is divisible by 
the given factor. I can then just have a counter that will increase with each successful
check.

Troubleshooting:
I got this working on my first attempt so none.

Reflection:
This one was very simple to do and was a good warmup for harder ones.


Problem 2 - Barbecue
Design Ideas:
Since voter[i] and excluded[i] correlate, i can use a single for loop with both just referencing i.
I don't see any situation where i will need to read voter[i] at the same time as a different value for excluded.
I could probably solve this by setting up a vector like 'vector<int> count(n, 0) and just count how many times each person (index)
get voted for. The only thing left to solve after that would be the cases where it is tied and i need to
eliminate whoever has voted the most. 

Troubleshooting:
I started this one in the workshop and while my thought process was somewhat right. After sitting down to do it at home there is a lot to change. I can keep the idea of the lists storing the number of votes against a person
and the number of times theyve voted, however this should be done across two different vectors. I have re-written a lot of it, solving the problem by playing around with the contents of these lists and performing checks
only when necessary such as only checking the number of times someone has voted in the case that there is a tie. 

Reflection:
I actually found this one a bit more difficult than problem 3 (which i finished first). I think this is because while my ideas did work in the end, i found the implementation of them a bit more difficult. I did expect this
to be the case based on how i solved it but wanted to get some more practice using vectors to solve a problem in the way i have here.


Problem 3 - RunLengthEncoding
Design Ideas:
I feel like i can solve this using a single loop. I can iterate through the string,
each time i get to a number i can update a variable called 'multiplyer', then at
the character after i can just print it into a new string 'multiplyer' times. Afterwards
i just return the new string. Then to account for letters without a number in front,
after each print to the new string i can set 'multiplyer' back to 0.

Troubleshooting:
On the first implementation, i was also putting the numbers into the string. This should simple to fix just by using an else statement
after the isdigit() check. Meaning that only things that are't a digit get printed to the new string.
The next issue is that i am not multiplying the number of times elements are being printed. I think this is because i am not converting
the element to an integer, the stoi function should fix this. 
After taking a break since the workshop, looking at my current code again i am seeing some issues. These are my use of the 'stoi' function which won't work in the way i am using it, and i am also not yet checking
if the input is too long. These were straight forward to sort out. 
After this first proper attempt, the main issue is that i am not checking for 'multiplyers' of greater than 9 (more than 1 digit long). This should be fixable by just accumulating digits for multi by multiplying it by '10' and 
then addint the interger value of the current digit.
Everything is mostly passing now except i am failing on the test case "9999999999999999999999999999999999999999999999999X", i am assuming this is due to an overflow issue. I should be able to fix this by just having 
an earlier '>50' check, to return TOO LONG before we run into the overflow.

Reflection:
After the overflow fix it passed 100%. This problem took a few fixes/attempts however my inital thought process and solution was largely what i finished with. I am happy with that as it means i am improving at 
being able to identify the solutions from the start, now i just need to make sure my coding ability can match my thinking.


Problem 4 - RGBStreet
Design Ideas:
I think i could use a brute force approach again for this one, however i will take another opportunity to get practice with dynamic programming again, and hopefully find the solution this way rather than changing like the previous.
I can create a DP table tracking house index and colour, and storing the minimum cost to paint a house with a colour.

Troubleshooting:
While writing up my initial implementation, i decided to use stringstream which is a library which i dont remember ever using, or at least not in this class so far. It made sense to use for this problem as it could 
help with parsing in the different costs due to how the input is given. I think this will work, but if not it will be a good library to get some practice with as it will probably be very useful to be comfortable using.

Reflection:
I was actually able to get this one working first time, i think this was largely due to the practice i got with the previous question, and here i was able to implement the dynamic programming approach in a far cleaner and more understandable
way as i wasn't as confused along the way of writing it, which i think got me even more mixed up when trying to do it before. I'm still not 100% comfortable with writing dynamic programming solutions so will look for more in future questions.
