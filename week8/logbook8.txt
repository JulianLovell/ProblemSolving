
JULIAN'S LOGBOOK

Problem 1 - Thimbles
Design Ideas:
This seems pretty simple, i can read through each pair of selected thimbles, while doing this, i will have a variable tracking the current location of the ball. At each thimble swap,
i will check if either thimble is the one containing the ball by comparing it against the current tracked location, and if it is then set the variable to the value of the thimble
it is being swapped with. In the event of neither containing the ball i can just ignore it and continue to the next.

I think for me the most difficult part of this would be distinguishing the numbers in the given string, though that wont actually be too complicated. Actually upon rereading the problem,
if there are only cups 1-3, that means thimble 1 in the string will always be swaps[0] and thimble 2 will be swaps[2].

Also i am not 100% sure but i believe c++ inherently handels 'number chars' as ints as well, or i might be getting confused with python. I will try it based on that assumption first.

Troubleshooting:
My first issue seems to be that my cups arent swapping correctly. Only one failed test case is shown but it shows that i am outputting 1 as the result, which is also what i am intially assigning the first ball location as.
Based on the fact there are only 1,2 or 3 ball locations and i am currently getting 31/100, marks i am going to assume that i am returning 0 in every case. This will be to do with how i am handling the swap.
The first thing i thought of, was that maybe i was wrong in assuming c++ could work with char/int number values the same so i have added a char->int converstion, however that did not work.

I also just realised that i wasnt using the converted to int variables in my check/swaps so i will fix that and see if that was the issue.

Ok that also hasnt worked and i am still returning the exact same outputs. Which leads to my next idea that i am wrong in thinking i can extract individual char elements from a string using string[x] logic. 
I was fairly certain i could do that so i will have to double check.

Reflection:
After returning to this problem, i was very close from my progress in class and just needed some tweaks, mainly with the conversion. No major issues on this one.


Problem 2 - MatchNumbers 
Design Ideas:
Ok if i am understanding this correctly, then the each number is the index and the number of matches required is the element within that index. 
For this i think i just take a greedy approach. The rough logic will be: pick biggest number of matches element available that is less than the given int. Add the index to the string. 
Subtract matches used from given total. Repeat. I believe i could do this recursively or simply with loops. An issue i can see this enountering is where it would be optimal to have two 
smaller index values than the biggest which will be chosen first. For example if n = 50, and matches = [49, 24, 231] it would be more optimal to choose 24,23 (12). 
This leads to my next idea where i iterate from the end of the matches vector, selecting the first number that does not exceed the match limit n. In the above example, 
that would instead return 23,23 (22) which would in fact be the biggest possible number Troubleshooting: Reflection: Problem 3 - HandsShaking Design Ideas: Im not sure, 
but i feel like there might just be a mathematical solution to this one. I picked it because i thought it would be interesting, if i am right, to solve it using a formula instead of a standard approach like the rest.

Troubleshooting:
I was iterating through the matches array, but hadnt correctly implemented the logic for appending digits to the result or subtracting the match counts after each digit selection. 
To fix this i just had to subtract the corresponding number of matches from n. 

After that i was returning an empty string if the program couldnt form enough digits, such as cases where the number of matches was smaller than the smallest match requirement.
I just added a condition to return 0 if no digits got selected after the loop.

As i predicted the greedy approach caused issues. I have mosttly rewritten it but still using a bit of the same logic.
I was also getting issues with leading zeros, so added a flag to track whether we have selected the first non zero digit.

Reflection:


Problem 3 - HandsShaking
Design Ideas:
Im not sure, but i feel like there might just be a mathematical solution to this one. I picked it because i thought it would be interesting, if i am right, to solve it using a
formula instead of a standard approach like the rest. After looking into it a bit, i was right. I can use the Catalan Number formula which should make this quite simple.

Troubleshooting:
No issues.

Reflection:
I was correct in being able to use a mathematical formula. While it was an interesting solution for this problem, in an exam condition i would not be able to solve a problem in this way, unless it was by complete
chance a formula i know well.


Problem 4 - CorporationSalary
Design Ideas:

Troubleshooting:

Reflection:

